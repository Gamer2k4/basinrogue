#summary We don't have a server, and some of us wouldn't know what to do if we did

We have no test server! 
  * G2k4: How about this? http://www.soldatforums.com/index.php?topic=9986.0  I know a guy who knows a guy...
  * C.: Price?
  * G2k4: I sent the host an email.  I'll let you know the price ASAP, then you can discuss technical details with him.

(Antoine:) I haven't done much sysadmin. None in fact. So I'm not really familiar with the issues around setting up a program to run on a remote server and giving it appropriate permissions and allowing client access to it and all this sort of thing. Do any of you guys have more knowledge about this? If not, should we grab someone off RGRD to help us get started? 

(On this, konijn earlier wrote: "if we do a (PHP or Python ) / javascript roguelike that almost anybody can host that ( Easier to host PHP than Python obviously ). Ilya Beli started one ( with Python ), that is online here : http://80.64.90.140:8484/ Source code here : cvs -d :pserver:anonymous@l64-90-140.cn.ru:/home/cvs checkout heroquest This one is actually multiplayer in AJAX mode. Browser can do transparancy easy, play music/sounds, do caching and has a scripting engine.") 

(Christophe: "I doubt such patform will scale. It is possible but somewhat hard to write a roguelike in Python without performance issues. Now consider that the server might be used by several players at the same time. Also, the requirements are quite different than most regular PHP sites. There is a difference between a simple PHP site and a long standing process with it's own socket.") 

(konijn: "Good enough, let's forget about PHP" )


A: What kind of server machine would we want anyway? Is the OS important? - I suppose it would have implications in terms of the dialect of C++ we use?
  (C.) It should be possible to get a C++ written server working on anything that pretends to be an Internet Server.


What kind of technology should we use to connect the client to the server?
  (C.) Simple BSD sockets should work. If needed, we could add a standard protocol above them like XML-RPC.
  
  (Konijn) Eh. XML-RPC might be bloated, as in my email ( yes, I vow not to use it any more ) I proposed actually a telnet connection between client and server. Telnet connections can carry info to create a graphical GUI.


What kind of authentication would we use?
  (C.) Standard procedure as follows : client sends it's username to the server. Server knows the expected password. Server generates a random string of sufficient length ( 20 should be more than enouth ) to the client. The client concatenates his password to that string and computes the MD5 sum of the resulting string ( replace MD5 with SHA as appropriate ) and sends it back to the server. Server checks that the MD5 is the same as the one it computed on it's own.
  
  (Konijn) Like he says.


How would a user create an account?
  (C.) Either on the client or a forced passage on a dynamic web site. I would go for the former I think. That way you don't have to install and administer a HTTP server at the same time as the game server to get the game working. It doesn't mean such interaction would be impossible, just not required.

  (Konijn) Yes, we should definitely go with the client.

(A.) glad to see someone knows about all this stuff! :)

